# This is a basic workflow for integrating appdome-api-python with your github project
# File location should be under .github/workflows/
name: Appdome IOS Fuse Build And Sign

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Inputs the workflow accepts.
    inputs:
      ios_vanilla_file:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Download link for IPA file'
        # Default value if no value is explicitly provided
        default: ''
        # Input has to be provided for the workflow to run
        required: true
      Fusion_set_id:
        description: "IOS fusion set id"
        default: ''
        required: true
      sign_otions:
        type: choice
        description: IOS Sign Options
        options: 
        - Appdome Signing
        - Private Signing
        - Auto-Dev Private Signing
        required: true
      p12_file:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Download link for P12 file'
        # Default value if no value is explicitly provided
        default: ''
        # Input has to be provided for the workflow to run
        required: false
      p12_password:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'P12 password'
        # Default value if no value is explicitly provided
        default: ''
        required: false
      Provisioning_Profiles:
        description: 'Download link for Provisioning Profiles file'
        default: ''
        required: true
      entitlements_file:
        description: 'Download link for entitlements file'
        default: ''
        required: false
      sign_overrids:
        description: 'Download link for json sign overrides'
        default: ''
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # A demo job that builds an application to use with appdome
  build_app:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          path: main
          
     # Cloning appdome-api-python github repository
      - name: Cloning appdome-api-python github repository
        uses: actions/checkout@master
        with:
          repository: Appdome/appdome-api-python
          ref: refs/heads/main
          path: appdome

      # Runs dependencies intallation
      - name: Run dependencies installation
        run: |
            sudo apt update 
            sudo apt install python3-pip
            sudo pip3 install -r appdome/requirements.txt
      
      - name: download files
        run: |
          mkdir files
          mkdir files/provision_profile
          mkdir files/entitlements
          VAR=${{github.event.inputs.p12_file}}
          if [[ $VAR != '' ]]; then
            wget $VAR -O files/p12
          fi
          counter=1
          for i in ${{github.event.inputs.Provisioning_Profiles}}
            do
              wget $i -O "files/provision_profile/${counter}.mobileprovision"
              provision_profile_paths="$provision_profile_paths files/provision_profile/${counter}.mobileprovision"
              ((counter++))
            done
          counter=1  
          for i in ${{github.event.inputs.entitlements_file}}
            do
              wget $i -O "files/entitlements/${counter}.plist"
              entitlements_paths="$entitlements_paths files/entitlements/${counter}.plist"
              ((counter++))
            done
          VAR=${{github.event.inputs.sign_overrids}}
          if [[ $VAR != '' ]]; then
            echo "Downloading json sign overrides"
            wget ${{github.event.inputs.sign_overrids}} -O files/sign_overrides.json
          fi
          wget ${{github.event.inputs.ios_vanilla_file}} -O files/vanilla.ipa
          ls files
          echo $provision_profile_paths
          
      # Run appdome api for iOS apps
      - name: Appdome workflow for IOS
        run: |
          PRO=$provision_profile_paths
          echo $PRO
          mkdir output
          CHOICE="${{github.event.inputs.sign_otions}}"
          if [[ $CHOICE == "Appdome Signing" ]];then
            VAR=${{github.event.inputs.sign_overrids}}
            if [[ -n $VAR ]]; then
              VAR=${{github.event.inputs.entitlements_file}}
              if [[ -n $VAR ]]; then
                sudo python3 appdome/appdome-api-python/appdome_api.py -key ${{secrets.APPDOME_API_KEY}} -fs ${{github.event.inputs.fusion_set_id}} --app ./files/vanilla.ipa --sign_on_appdome --keystore ./files/p12 --keystore_pass ${{github.event.inputs.p12_password}} --sign_overrides files/sign_overrides.json --provisioning_profiles $PRO --entitlements "$entitlements_paths" --output ./output/appdome_vanilla.ipa --certificate_output ./output/certificate.pdf
              else
                sudo python3 appdome/appdome-api-python/appdome_api.py -key ${{secrets.APPDOME_API_KEY}} -fs ${{github.event.inputs.fusion_set_id}} --app ./files/vanilla.ipa --sign_on_appdome --keystore ./files/p12 --keystore_pass ${{github.event.inputs.p12_password}} --sign_overrides files/sign_overrides.json --provisioning_profiles $PRO --output ./output/appdome_vanilla.ipa --certificate_output ./output/certificate.pdf
              fi
            else
              VAR=${{github.event.inputs.entitlements_file}}
              if [[ -n $VAR ]]; then
                sudo python3 appdome/appdome-api-python/appdome_api.py -key ${{secrets.APPDOME_API_KEY}} -fs ${{github.event.inputs.fusion_set_id}} --app ./files/vanilla.ipa --sign_on_appdome --keystore ./files/p12 --keystore_pass ${{github.event.inputs.p12_password}} --provisioning_profiles $PRO --entitlements "$entitlements_paths" --output ./output/appdome_vanilla.ipa --certificate_output ./output/certificate.pdf
              else
                sudo python3 appdome/appdome-api-python/appdome_api.py -key ${{secrets.APPDOME_API_KEY}} -fs ${{github.event.inputs.fusion_set_id}} --app ./files/vanilla.ipa --sign_on_appdome --keystore ./files/p12 --keystore_pass ${{github.event.inputs.p12_password}} --provisioning_profiles $PRO --output ./output/appdome_vanilla.ipa --certificate_output ./output/certificate.pdf
              fi
            fi
          elif [[ $CHOICE == "Private Signing" ]];then
            sudo python3 appdome/appdome-api-python/appdome_api.py -key ${{secrets.APPDOME_API_KEY}} -fs ${{github.event.inputs.fusion_set_id}} --app ./files/vanilla.ipa --private_signing --sign_overrides files/sign_overrides.json --provisioning_profiles $PRO --output ./output/appdome_vanilla.ipa --certificate_output ./output/certificate.pdf
          elif [[ $CHOICE == "Auto-Dev Private Signing" ]];then
            sudo python3 appdome/appdome-api-python/appdome_api.py -key ${{secrets.APPDOME_API_KEY}} -fs ${{github.event.inputs.fusion_set_id}} --app ./files/vanilla.ipa --auto_dev_private_signing --sign_overrides files/sign_overrides.json --provisioning_profiles $PRO --entitlements "$entitlements_paths" --output ./output/appdome_vanilla.ipa --certificate_output ./output/certificate.pdf
          fi
          ls output
      
      # Upload fuse output as an artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: workflow-artifacts
          path: ./output/ # path to output folder
