# This is a basic workflow for integrating appdome-api-python with your github project
# File location should be under .github/workflows/
name: Appdome Android Fuse Build And Sign

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Inputs the workflow accepts.
    inputs:
      Android_vanilla_file:
        description: 'APK file'
        # Default value if no value is explicitly provided
        default: ''
        # Input has to be provided for the workflow to run
        required: true
      Fusion_set_id:
        description: "Android fusion set id"
        default: ''
        required: true
      sign_otions:
        type: choice
        description: Android Sign Options
        options: 
        - Appdome Signing
        - Private Signing
        - Auto-Dev Private Signing
        required: true
      Keystore_file:
        description: 'Keystore file'
        default: ''
        required: false
      keystore_password:
        description: 'keystore password'
        default: ''
        required: false
      keystore_alias:
        description: 'keystore alias'
        default: ''
        required: false
      key_pass:
        description: 'keystore key password'
        default: ''
        required: false
      signing_fingerprint:
        description: 'signing sha1 fingerprint'
        default: ''
        required: false
      google_play_signing:
        description: 'Google Play App Signing program'
        type: boolean
        default: false
        required: false
      sign_overrids:
        description: 'Download link for json file with sign overrides'
        default: ''
        required: false
      

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # A demo job that builds an application to use with appdome
  build_app:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          path: main
          
     # Cloning appdome-api-python github repository
      - name: Cloning appdome-api-python github repository
        uses: actions/checkout@master
        with:
          repository: Appdome/appdome-api-python
          ref: refs/heads/main
          path: appdome

      # Runs dependencies intallation
      - name: Run dependencies installation
        run: |
            sudo apt update 
            sudo apt install python3-pip
            sudo pip3 install -r appdome/requirements.txt
      
      - name: download files
        run: |
          mkdir files
          wget ${{github.event.inputs.android_vanilla_file}} -O files/vanilla.apk
          if [[ ${{github.event.inputs.keystore_file}} != '' ]]; then
            echo "Downloading keystore file"
            wget ${{github.event.inputs.keystore_file}} -O files/file.keystore
          fi
          if [[ -n ${{github.event.inputs.sign_overrids}} ]]; then
            echo "Downloading json sign overrides"
            wget ${{github.event.inputs.sign_overrids}} -O files/sign_overrides.json
          fi
          ls files
      
      # Run appdome api for Android apps
      - name: Appdome workflow for Android apps
        run: |
          mkdir output
          if [[ ${{ github.event.inputs.sign_otions}} == "Appdome Signing" ]];then
            if [[ -n ${{github.event.inputs.sign_overrids}} ]]; then
              sudo python3 appdome/appdome-api-python/appdome_api.py -key ${{secrets.APPDOME_API_KEY}} --app ./files/vanilla.apk --sign_on_appdome -fs ${{github.event.inputs.fusion_set_id}} --keystore ./files/file.keystore --keystore_pass ${{github.event.inputs.keystore_password}} --keystore_alias ${{github.event.inputs.keystore_alias}} --key_pass ${{github.event.inputs.key_pass}} --sign_overrides files/sign_overrides.json --output ./output/appdome_vanilla.apk --certificate_output ./output/certificate.pdf
            else
              sudo python3 appdome/appdome-api-python/appdome_api.py -key ${{secrets.APPDOME_API_KEY}} --app ./files/vanilla.apk --sign_on_appdome -fs ${{github.event.inputs.fusion_set_id}} --keystore ./files/file.keystore --keystore_pass ${{github.event.inputs.keystore_password}} --keystore_alias ${{github.event.inputs.keystore_alias}} --key_pass ${{github.event.inputs.key_pass}} --output ./output/appdome_vanilla.apk --certificate_output ./output/certificate.pdf
            fi
          elif [[ ${{ github.event.inputs.sign_otions}} == "Private Signing" ]];then
            if [[ -n ${{github.event.inputs.sign_overrids}} ]]; then
              if [ ${{ github.event.inputs.google_play_signing}} = true ] ; then
                sudo python3 appdome/appdome-api-python/appdome_api.py -key ${{secrets.APPDOME_API_KEY}} --app ./files/vanilla.apk --private_signing -fs ${{github.event.inputs.fusion_set_id}} --signing_fingerprint ${{github.event.inputs.signing_fingerprint}} --sign_overrides files/sign_overrides.json --google_play_signing --output ./output/appdome_vanilla.apk --certificate_output ./output/certificate.pdf
              else
                sudo python3 appdome/appdome-api-python/appdome_api.py -key ${{secrets.APPDOME_API_KEY}} --app ./files/vanilla.apk --private_signing -fs ${{github.event.inputs.fusion_set_id}} --signing_fingerprint ${{github.event.inputs.signing_fingerprint}} --sign_overrides files/sign_overrides.json --output ./output/appdome_vanilla.apk --certificate_output ./output/certificate.pdf
              fi
            else
              if [ ${{ github.event.inputs.google_play_signing}} = true ] ; then
                sudo python3 appdome/appdome-api-python/appdome_api.py -key ${{secrets.APPDOME_API_KEY}} --app ./files/vanilla.apk --private_signing -fs ${{github.event.inputs.fusion_set_id}} --signing_fingerprint ${{github.event.inputs.signing_fingerprint}} --google_play_signing --output ./output/appdome_vanilla.apk --certificate_output ./output/certificate.pdf
              else
                sudo python3 appdome/appdome-api-python/appdome_api.py -key ${{secrets.APPDOME_API_KEY}} --app ./files/vanilla.apk --private_signing -fs ${{github.event.inputs.fusion_set_id}} --signing_fingerprint ${{github.event.inputs.signing_fingerprint}} --output ./output/appdome_vanilla.apk --certificate_output ./output/certificate.pdf
              fi
            fi
          elif [[ ${{ github.event.inputs.sign_otions}} == "Auto-Dev Private Signing" ]];then
          sudo python3 appdome/appdome-api-python/appdome_api.py -key ${{secrets.APPDOME_API_KEY}} --app ./files/vanilla.apk --auto_dev_private_signing -fs ${{github.event.inputs.fusion_set_id}} --signing_fingerprint ${{github.event.inputs.signing_fingerprint}} --google_play_signing --output ./output/appdome_vanilla.apk --certificate_output ./output/certificate.pdf
          fi
          ls output
          
      # Upload fuse output as an artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: workflow-artifacts
          path: ./output/ # path to output folder
